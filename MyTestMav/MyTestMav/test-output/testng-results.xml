<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="10" passed="8" failed="2" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2022-06-06T11:30:48 IST" name="Suite" finished-at="2022-06-06T11:32:43 IST" duration-ms="114271">
    <groups>
    </groups>
    <test started-at="2022-06-06T11:30:48 IST" name="Test" finished-at="2022-06-06T11:32:43 IST" duration-ms="114271">
      <class name="com.myMav.testcases.Credit1">
        <test-method is-config="true" signature="extent()[pri:0, instance:com.myMav.testcases.Credit1@6eda5c9]" started-at="2022-06-06T11:32:11 IST" name="extent" finished-at="2022-06-06T11:32:11 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- extent -->
        <test-method is-config="true" signature="setup()[pri:0, instance:com.myMav.testcases.Credit1@6eda5c9]" started-at="2022-06-06T11:32:11 IST" name="setup" finished-at="2022-06-06T11:32:16 IST" duration-ms="4706" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="cred()[pri:0, instance:com.myMav.testcases.Credit1@6eda5c9]" started-at="2022-06-06T11:32:16 IST" name="cred" finished-at="2022-06-06T11:32:24 IST" duration-ms="8376" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cred -->
        <test-method is-config="true" signature="get(org.testng.ITestResult)[pri:0, instance:com.myMav.testcases.Credit1@6eda5c9]" started-at="2022-06-06T11:32:24 IST" name="get" finished-at="2022-06-06T11:32:24 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=cred status=SUCCESS method=Credit1.cred()[pri:0, instance:com.myMav.testcases.Credit1@6eda5c9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- get -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.myMav.testcases.Credit1@6eda5c9]" started-at="2022-06-06T11:32:24 IST" name="tearDown" finished-at="2022-06-06T11:32:25 IST" duration-ms="984" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.myMav.testcases.Credit1 -->
      <class name="com.myMav.testcases.Menu1">
        <test-method is-config="true" signature="extent()[pri:0, instance:com.myMav.testcases.Menu1@5f058f00]" started-at="2022-06-06T11:32:29 IST" name="extent" finished-at="2022-06-06T11:32:29 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- extent -->
        <test-method is-config="true" signature="setup()[pri:0, instance:com.myMav.testcases.Menu1@5f058f00]" started-at="2022-06-06T11:32:29 IST" name="setup" finished-at="2022-06-06T11:32:33 IST" duration-ms="4351" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="getex()[pri:0, instance:com.myMav.testcases.Menu1@5f058f00]" started-at="2022-06-06T11:32:33 IST" name="getex" finished-at="2022-06-06T11:32:42 IST" duration-ms="8312" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getex -->
        <test-method is-config="true" signature="get(org.testng.ITestResult)[pri:0, instance:com.myMav.testcases.Menu1@5f058f00]" started-at="2022-06-06T11:32:42 IST" name="get" finished-at="2022-06-06T11:32:42 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getex status=SUCCESS method=Menu1.getex()[pri:0, instance:com.myMav.testcases.Menu1@5f058f00] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- get -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.myMav.testcases.Menu1@5f058f00]" started-at="2022-06-06T11:32:42 IST" name="tearDown" finished-at="2022-06-06T11:32:43 IST" duration-ms="1057" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.myMav.testcases.Menu1 -->
      <class name="com.myMav.testcases.Rent1">
        <test-method is-config="true" signature="extent()[pri:0, instance:com.myMav.testcases.Rent1@55b7a4e0]" started-at="2022-06-06T11:32:25 IST" name="extent" finished-at="2022-06-06T11:32:25 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- extent -->
        <test-method is-config="true" signature="setup()[pri:0, instance:com.myMav.testcases.Rent1@55b7a4e0]" started-at="2022-06-06T11:32:25 IST" name="setup" finished-at="2022-06-06T11:32:28 IST" duration-ms="2483" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="rental()[pri:0, instance:com.myMav.testcases.Rent1@55b7a4e0]" started-at="2022-06-06T11:32:28 IST" name="rental" finished-at="2022-06-06T11:32:29 IST" duration-ms="1074" status="FAIL">
          <exception class="org.openqa.selenium.ElementClickInterceptedException">
            <message>
              <![CDATA[element click intercepted: Element is not clickable at point (84, 686)
  (Session info: chrome=102.0.5005.63)
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'LAPTOP-V2OEVV9T', ip: '192.168.0.85', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 102.0.5005.63, chrome: {chromedriverVersion: 102.0.5005.61 (0e59bcc00cc4..., userDataDir: C:\Users\GUNTUK~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:52521}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: a13575871f60b5c07b3e13758db0e24d]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.ElementClickInterceptedException: element click intercepted: Element is not clickable at point (84, 686)
  (Session info: chrome=102.0.5005.63)
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'LAPTOP-V2OEVV9T', ip: '192.168.0.85', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 102.0.5005.63, chrome: {chromedriverVersion: 102.0.5005.61 (0e59bcc00cc4..., userDataDir: C:\Users\GUNTUK~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:52521}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: a13575871f60b5c07b3e13758db0e24d
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebElement.execute(RemoteWebElement.java:285)
at org.openqa.selenium.remote.RemoteWebElement.click(RemoteWebElement.java:84)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:51)
at jdk.proxy2/jdk.proxy2.$Proxy14.click(Unknown Source)
at com.myMav.testcases.Rent1.rental(Rent1.java:14)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.ElementClickInterceptedException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- rental -->
        <test-method is-config="true" signature="get(org.testng.ITestResult)[pri:0, instance:com.myMav.testcases.Rent1@55b7a4e0]" started-at="2022-06-06T11:32:29 IST" name="get" finished-at="2022-06-06T11:32:29 IST" duration-ms="0" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=rental status=FAILURE method=Rent1.rental()[pri:0, instance:com.myMav.testcases.Rent1@55b7a4e0] output={null}]]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NullPointerException">
            <message>
              <![CDATA[Cannot invoke "com.aventstack.extentreports.ExtentTest.fail(com.aventstack.extentreports.markuputils.Markup)" because "this.test" is null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException: Cannot invoke "com.aventstack.extentreports.ExtentTest.fail(com.aventstack.extentreports.markuputils.Markup)" because "this.test" is null
at com.myMav.testcases.Base.get(Base.java:79)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:385)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:321)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:700)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:676)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:660)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- get -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.myMav.testcases.Rent1@55b7a4e0]" started-at="2022-06-06T11:32:29 IST" name="tearDown" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1654495349478" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.myMav.testcases.Rent1 -->
      <class name="com.myMav.testcases.Refresh1">
        <test-method is-config="true" signature="extent()[pri:0, instance:com.myMav.testcases.Refresh1@5119fb47]" started-at="2022-06-06T11:31:16 IST" name="extent" finished-at="2022-06-06T11:31:16 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- extent -->
        <test-method is-config="true" signature="setup()[pri:0, instance:com.myMav.testcases.Refresh1@5119fb47]" started-at="2022-06-06T11:31:16 IST" name="setup" finished-at="2022-06-06T11:31:20 IST" duration-ms="4302" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="Refres()[pri:0, instance:com.myMav.testcases.Refresh1@5119fb47]" started-at="2022-06-06T11:31:20 IST" name="Refres" finished-at="2022-06-06T11:31:29 IST" duration-ms="8684" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Refres -->
        <test-method is-config="true" signature="get(org.testng.ITestResult)[pri:0, instance:com.myMav.testcases.Refresh1@5119fb47]" started-at="2022-06-06T11:31:29 IST" name="get" finished-at="2022-06-06T11:31:29 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Refres status=SUCCESS method=Refresh1.Refres()[pri:0, instance:com.myMav.testcases.Refresh1@5119fb47] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- get -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.myMav.testcases.Refresh1@5119fb47]" started-at="2022-06-06T11:31:29 IST" name="tearDown" finished-at="2022-06-06T11:31:29 IST" duration-ms="423" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.myMav.testcases.Refresh1 -->
      <class name="com.myMav.testcases.Aircoo1">
        <test-method is-config="true" signature="extent()[pri:0, instance:com.myMav.testcases.Aircoo1@7714e963]" started-at="2022-06-06T11:31:56 IST" name="extent" finished-at="2022-06-06T11:31:56 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- extent -->
        <test-method is-config="true" signature="setup()[pri:0, instance:com.myMav.testcases.Aircoo1@7714e963]" started-at="2022-06-06T11:31:56 IST" name="setup" finished-at="2022-06-06T11:31:58 IST" duration-ms="2490" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="Air()[pri:0, instance:com.myMav.testcases.Aircoo1@7714e963]" started-at="2022-06-06T11:31:58 IST" name="Air" finished-at="2022-06-06T11:31:59 IST" duration-ms="1103" status="FAIL">
          <exception class="org.openqa.selenium.ElementClickInterceptedException">
            <message>
              <![CDATA[element click intercepted: Element is not clickable at point (424, 687)
  (Session info: chrome=102.0.5005.63)
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'LAPTOP-V2OEVV9T', ip: '192.168.0.85', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 102.0.5005.63, chrome: {chromedriverVersion: 102.0.5005.61 (0e59bcc00cc4..., userDataDir: C:\Users\GUNTUK~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:52072}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: c440c5d8e73bcec01154442510b22f0a]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.ElementClickInterceptedException: element click intercepted: Element is not clickable at point (424, 687)
  (Session info: chrome=102.0.5005.63)
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'LAPTOP-V2OEVV9T', ip: '192.168.0.85', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 102.0.5005.63, chrome: {chromedriverVersion: 102.0.5005.61 (0e59bcc00cc4..., userDataDir: C:\Users\GUNTUK~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:52072}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: c440c5d8e73bcec01154442510b22f0a
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebElement.execute(RemoteWebElement.java:285)
at org.openqa.selenium.remote.RemoteWebElement.click(RemoteWebElement.java:84)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:51)
at jdk.proxy2/jdk.proxy2.$Proxy14.click(Unknown Source)
at com.myMav.testcases.Aircoo1.Air(Aircoo1.java:14)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.ElementClickInterceptedException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Air -->
        <test-method is-config="true" signature="get(org.testng.ITestResult)[pri:0, instance:com.myMav.testcases.Aircoo1@7714e963]" started-at="2022-06-06T11:31:59 IST" name="get" finished-at="2022-06-06T11:31:59 IST" duration-ms="0" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Air status=FAILURE method=Aircoo1.Air()[pri:0, instance:com.myMav.testcases.Aircoo1@7714e963] output={null}]]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NullPointerException">
            <message>
              <![CDATA[Cannot invoke "com.aventstack.extentreports.ExtentTest.fail(com.aventstack.extentreports.markuputils.Markup)" because "this.test" is null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException: Cannot invoke "com.aventstack.extentreports.ExtentTest.fail(com.aventstack.extentreports.markuputils.Markup)" because "this.test" is null
at com.myMav.testcases.Base.get(Base.java:79)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:385)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:321)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:700)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:676)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:660)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- get -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.myMav.testcases.Aircoo1@7714e963]" started-at="2022-06-06T11:31:59 IST" name="tearDown" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1654495319641" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.myMav.testcases.Aircoo1 -->
      <class name="com.myMav.testcases.Owner1">
        <test-method is-config="true" signature="extent()[pri:0, instance:com.myMav.testcases.Owner1@2ef3eef9]" started-at="2022-06-06T11:30:48 IST" name="extent" finished-at="2022-06-06T11:30:49 IST" duration-ms="136" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- extent -->
        <test-method is-config="true" signature="setup()[pri:0, instance:com.myMav.testcases.Owner1@2ef3eef9]" started-at="2022-06-06T11:30:49 IST" name="setup" finished-at="2022-06-06T11:30:54 IST" duration-ms="5794" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="Own()[pri:0, instance:com.myMav.testcases.Owner1@2ef3eef9]" started-at="2022-06-06T11:30:54 IST" name="Own" finished-at="2022-06-06T11:31:03 IST" duration-ms="8302" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Own -->
        <test-method is-config="true" signature="get(org.testng.ITestResult)[pri:0, instance:com.myMav.testcases.Owner1@2ef3eef9]" started-at="2022-06-06T11:31:03 IST" name="get" finished-at="2022-06-06T11:31:03 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Own status=SUCCESS method=Owner1.Own()[pri:0, instance:com.myMav.testcases.Owner1@2ef3eef9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- get -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.myMav.testcases.Owner1@2ef3eef9]" started-at="2022-06-06T11:31:03 IST" name="tearDown" finished-at="2022-06-06T11:31:04 IST" duration-ms="1315" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.myMav.testcases.Owner1 -->
      <class name="com.myMav.testcases.Profile1">
        <test-method is-config="true" signature="extent()[pri:0, instance:com.myMav.testcases.Profile1@3835c46]" started-at="2022-06-06T11:31:29 IST" name="extent" finished-at="2022-06-06T11:31:29 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- extent -->
        <test-method is-config="true" signature="setup()[pri:0, instance:com.myMav.testcases.Profile1@3835c46]" started-at="2022-06-06T11:31:29 IST" name="setup" finished-at="2022-06-06T11:31:34 IST" duration-ms="5288" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="prof()[pri:0, instance:com.myMav.testcases.Profile1@3835c46]" started-at="2022-06-06T11:31:34 IST" name="prof" finished-at="2022-06-06T11:31:43 IST" duration-ms="8256" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- prof -->
        <test-method is-config="true" signature="get(org.testng.ITestResult)[pri:0, instance:com.myMav.testcases.Profile1@3835c46]" started-at="2022-06-06T11:31:43 IST" name="get" finished-at="2022-06-06T11:31:43 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=prof status=SUCCESS method=Profile1.prof()[pri:0, instance:com.myMav.testcases.Profile1@3835c46] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- get -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.myMav.testcases.Profile1@3835c46]" started-at="2022-06-06T11:31:43 IST" name="tearDown" finished-at="2022-06-06T11:31:44 IST" duration-ms="890" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.myMav.testcases.Profile1 -->
      <class name="com.myMav.testcases.Login1">
        <test-method is-config="true" signature="extent()[pri:0, instance:com.myMav.testcases.Login1@20ce78ec]" started-at="2022-06-06T11:31:59 IST" name="extent" finished-at="2022-06-06T11:31:59 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- extent -->
        <test-method is-config="true" signature="setup()[pri:0, instance:com.myMav.testcases.Login1@20ce78ec]" started-at="2022-06-06T11:31:59 IST" name="setup" finished-at="2022-06-06T11:32:02 IST" duration-ms="3011" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="log()[pri:0, instance:com.myMav.testcases.Login1@20ce78ec]" started-at="2022-06-06T11:32:02 IST" name="log" finished-at="2022-06-06T11:32:10 IST" duration-ms="8292" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- log -->
        <test-method is-config="true" signature="get(org.testng.ITestResult)[pri:0, instance:com.myMav.testcases.Login1@20ce78ec]" started-at="2022-06-06T11:32:10 IST" name="get" finished-at="2022-06-06T11:32:10 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=log status=SUCCESS method=Login1.log()[pri:0, instance:com.myMav.testcases.Login1@20ce78ec] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- get -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.myMav.testcases.Login1@20ce78ec]" started-at="2022-06-06T11:32:10 IST" name="tearDown" finished-at="2022-06-06T11:32:11 IST" duration-ms="902" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.myMav.testcases.Login1 -->
      <class name="com.myMav.testcases.Locality1">
        <test-method is-config="true" signature="extent()[pri:0, instance:com.myMav.testcases.Locality1@1dde4cb2]" started-at="2022-06-06T11:31:44 IST" name="extent" finished-at="2022-06-06T11:31:44 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- extent -->
        <test-method is-config="true" signature="setup()[pri:0, instance:com.myMav.testcases.Locality1@1dde4cb2]" started-at="2022-06-06T11:31:44 IST" name="setup" finished-at="2022-06-06T11:31:46 IST" duration-ms="2652" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="loc()[pri:0, instance:com.myMav.testcases.Locality1@1dde4cb2]" started-at="2022-06-06T11:31:46 IST" name="loc" finished-at="2022-06-06T11:31:55 IST" duration-ms="8321" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loc -->
        <test-method is-config="true" signature="get(org.testng.ITestResult)[pri:0, instance:com.myMav.testcases.Locality1@1dde4cb2]" started-at="2022-06-06T11:31:55 IST" name="get" finished-at="2022-06-06T11:31:55 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loc status=SUCCESS method=Locality1.loc()[pri:0, instance:com.myMav.testcases.Locality1@1dde4cb2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- get -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.myMav.testcases.Locality1@1dde4cb2]" started-at="2022-06-06T11:31:55 IST" name="tearDown" finished-at="2022-06-06T11:31:56 IST" duration-ms="927" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.myMav.testcases.Locality1 -->
      <class name="com.myMav.testcases.Property1">
        <test-method is-config="true" signature="extent()[pri:0, instance:com.myMav.testcases.Property1@6a192cfe]" started-at="2022-06-06T11:31:04 IST" name="extent" finished-at="2022-06-06T11:31:04 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- extent -->
        <test-method is-config="true" signature="setup()[pri:0, instance:com.myMav.testcases.Property1@6a192cfe]" started-at="2022-06-06T11:31:04 IST" name="setup" finished-at="2022-06-06T11:31:06 IST" duration-ms="2235" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="prop()[pri:0, instance:com.myMav.testcases.Property1@6a192cfe]" started-at="2022-06-06T11:31:06 IST" name="prop" finished-at="2022-06-06T11:31:15 IST" duration-ms="8372" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- prop -->
        <test-method is-config="true" signature="get(org.testng.ITestResult)[pri:0, instance:com.myMav.testcases.Property1@6a192cfe]" started-at="2022-06-06T11:31:15 IST" name="get" finished-at="2022-06-06T11:31:15 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=prop status=SUCCESS method=Property1.prop()[pri:0, instance:com.myMav.testcases.Property1@6a192cfe] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- get -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.myMav.testcases.Property1@6a192cfe]" started-at="2022-06-06T11:31:15 IST" name="tearDown" finished-at="2022-06-06T11:31:16 IST" duration-ms="1159" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.myMav.testcases.Property1 -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
